biber -tool -V release-management.bib for validating 

# IS journals # 
## On Information Systems Journal ISJ ##

# SE journals # 
## On IEEE Software ###
## On IEEE Tran Software Enginnering ##
## On Journal of Software Maintenance ##

## On Empirical Software Engineering ## 

# SE conferences ## 
## On International Conference on Software Engineering ICSE ##

## From a HCI perspective ## 
## From a business perspective ##

}


# Books on release management # 



## On Information Systems Journal ISJ ##
@article{jorgensen2001putting,
  title={Putting it all in the trunk: incremental software development in the FreeBSD open source project},
  author={J{\o}rgensen, Niels},
  journal={Information Systems Journal},
  volume={11},
  number={4},
  pages={321--336},
  year={2001},
  publisher={Wiley Online Library}
}



## From a business perspective ##

@article{barqawi_et_al2016,
author = {Barqawi, Neda and Syed, Kamran and Mathiassen, Lars},
title = {Applying service-dominant logic to recurrent release of software: an action research study},
journal = {Journal of Business \& Industrial Marketing},
volume = {31},
number = {7},
pages = {928-940},
year = {2016},
doi = {10.1108/JBIM-02-2015-0030},

URL = { 
        http://dx.doi.org/10.1108/JBIM-02-2015-0030
    
},
eprint = { 
        http://dx.doi.org/10.1108/JBIM-02-2015-0030
    
}
,
    abstract = { Purpose Fierce competition drives software vendors to rely on Software-as-a-Service (SaaS) strategies and to continuously match new releases with customers’ needs and competitors’ moves. Such recurrent release practices pose specific challenges for software vendors which shape how they service customers. To address these challenges, this paper aims to apply service science to innovate strategies for SaaS release management. Design/methodology/approach Based on action research methodology, the authors collaborated closely with Software Inc., an alias for a large multinational software provider, to apply service-dominant logic systematically, to analyze and improve its SaaS release management process and to support ongoing value co-creation with its customers. Findings The authors provide a detailed account of how Software Inc. improved its SaaS release management practices; they extend current understanding of service innovation dynamics in SaaS environments and offer a model of value co-creation in SaaS release management grounded in the findings from Software Inc. Research limitations/implications The research draws on a single case study with particular characteristics. Still, it allows for analytical generalizations with both theoretical and practical implications for how SaaS managers can improve recurrent release practices based on foundational service-dominant logic principles. Practical implications The authors suggest that SaaS managers concentrate on knowledge-sharing with customers, ensure continuous communication among teams supporting the service, re-organize release management to enhance the value co-creation process, use technology to improve customer service experiences and use service mapping to improve release management and service quality. Originality/value The authors bridge service-dominant logic principles and SaaS knowledge by demonstrating how service-dominant logic can be used to improve SaaS release practices and by offering conceptual and practical knowledge about value co-creation between customers and suppliers in SaaS contexts. }
}


## On IEEE Software ###

## On IEEE Software 2005 ###

@ARTICLE{Ruhe_and_Saliu2005,
author={G. Ruhe and M. O. Saliu},
journal={IEEE Software},
title={The art and science of software release planning},
year={2005},
volume={22},
number={6},
pages={47-53},
abstract={Incremental development provides customers with parts of a system early, so they receive both a sense of value and an opportunity to provide feedback early in the process. Each system release is thus a collection of features that the customer values. Furthermore, each release serves to fix defects detected in former product variants. Release planning (RP) addresses decisions related to selecting and assigning features to create a sequence of consecutive product releases that satisfies important technical, resource, budget, and risk constraints.},
keywords={decision making;planning;software development management;decision support approach;incremental development;software development management;software release planning;Art;Capability maturity model;Computational intelligence;Feedback;Humans;Meeting planning;Monitoring;Process planning;Scheduling;Subspace constraints;Incremental software development;art and science;decision support;hybrid release planning;release planning},
doi={10.1109/MS.2005.164},
ISSN={0740-7459},
month={Nov},}

## On IEEE Software 2015 ###

@article{Adams_et_al2015, 
author={B. Adams and S. Bellomo and C. Bird and T. Marshall-Keim and F. Khomh and K. Moir},
journal={IEEE Software},
title={The Practice and Future of Release Engineering: A Roundtable with Three Release Engineers},
year={2015},
volume={32},
number={2},
pages={42-49},
abstract={Three release engineers share their perspectives on quality metrics for releases and on continuous delivery's benefits and limitations. They also discuss release-engineering job skills, the required mind-set, the role of education, and cultural change, and they recommend future research areas. The Web extra at http://youtu.be/O3cJQTZXAI8 is an audio recording of Davide Falessi speaking with Guest Editors Bram Adams and Foutse Khomh about release engineering and its value to the software industry.},
keywords={Continuous production;Interviews;Software development;Software engineering;Special issues and sections;continuous delivery;release engineering;software development;software engineering},
doi={10.1109/MS.2015.52},
ISSN={0740-7459},
month={Mar},}

@Article{	  michlmayr2015and,
  title		= {Why and How Should Open Source Projects Adopt Time-Based
		  Releases?},
  author	= {Michlmayr, Martin and Fitzgerald, Brian and Stol,
		  Klaas-Jan},
  journal	= {Software, IEEE},
  volume	= {32},
  number	= {2},
  pages		= {55--63},
  year		= {2015},
  publisher	= {IEEE}
}


@inproceedings{Michlmayr_et_al2007,
  title={Release management in free software projects: Practices and problems},
  author={Michlmayr, Martin and Hunt, Francis and Probert, David},
  booktitle={IFIP International Conference on Open Source Systems},
  pages={295--300},
  year={2007},
  organization={Springer}
}


@article{michlmayr2012time,
  title={Time-based release management in free and open source (FOSS) projects},
  author={Michlmayr, Martin and Fitzgerald, Brian},
  journal={International Journal of Open Source Software and Processes (IJOSSP)},
  volume={4},
  number={1},
  pages={1--19},
  year={2012},
  publisher={IGI Global}
}




@phdthesis{Michlmayr07qualityimprovement,
    author = {Martin Michlmayr},
    title = {Quality Improvement in Volunteer Free and Open Source Software Projects – Exploring the Impact of Release Management},
    school = {University of Cambridge},
    year = {2007}
}


@phdthesis{poo2016release,
  title={Release management in free and open source software ecosystems},
  author={Poo-Caama{\~n}o, Germ{\'a}n},
  year={2016},
  school={University of Victoria, Canada}
}

@phdthesis{wright2012release,
  title={Release engineering processes, their faults and failures},
  author={Wright, Hyrum Kurt},
  year={2012},
  school = {University of Texas}
}


@inproceedings{wright2009subversion,
  title={Subversion 1.5: A case study in open source release mismanagement},
  author={Wright, Hyrum K and Perry, Dewayne E},
  booktitle={Emerging Trends in Free/Libre/Open Source Software Research and Development, 2009. FLOSS'09. ICSE Workshop on},
  pages={13--18},
  year={2009},
  organization={IEEE}
}



## On Empirical Software Engineering ##
### On Empirical Software Engineering - 2018 ###
@Article{Laukkanen2018,
author="Laukkanen, Eero
and Paasivaara, Maria
and Itkonen, Juha
and Lassenius, Casper",
title="Comparison of release engineering practices in a large mature company and a startup",
journal="Empirical Software Engineering",
year="2018",
month="Mar",
day="28",
abstract="Modern release engineering practices provide multiple benefits for software companies, but organizations have struggled when trying to adopt the most advanced practices, such as continuous delivery. It is not known in which contexts the most advanced practices are applicable and what can be achieved by adopting them. In this study, we discuss the effect of the organizational context on adopted release engineering practices and what outcomes are achieved with the practices. We study two organizational contexts: the startup and the large mature company context. The effect of the product context is mitigated by studying two case organizations with similar products, a rare research opportunity. We performed 18 interviews with various roles in the case organizations. The number of production environments, the number of customers, the control over the production environment, the available resources, the organization size and the distribution of the organization affected the release engineering practices and the ability to release frequently. Having less internal verification and more customer verification enabled fast feedback and customer experimentation in the startup context, but increased the number of production defects. However, having more internal verification in the large mature company context surprisingly did not prevent production defects. The organizational context had a large effect on how achievable modern release engineering practices, such as continuous delivery, were. In the startup context, the lack of resources was the main factor hindering the improvement of release engineering practices, while in the large mature company context, the number of stakeholders and products were the main factors.",
issn="1573-7616",
doi="10.1007/s10664-018-9616-7",
url="https://doi.org/10.1007/s10664-018-9616-7"
}


## On International Conference on Software Engineering ICSE ##
### ICSE 2012 ### 

@inproceedings{Wright_et_al2012,
 author = {Wright, Hyrum K. and Perry, Dewayne E.},
 title = {Release Engineering Practices and Pitfalls},
 booktitle = {Proceedings of the 34th International Conference on Software Engineering},
 series = {ICSE '12},
 year = {2012},
 isbn = {978-1-4673-1067-3},
 location = {Zurich, Switzerland},
 address = {New York, USA},
 pages = {1281--1284},
 numpages = {4},
 url = {http://dl.acm.org/citation.cfm?id=2337223.2337395},
 publisher = {IEEE Press},
 doi={10.1109/ICSE.2012.6227099},
 ISSN={0270-5257},
 month={June},
}


@Proceedings{Ihara_et_al2017,
author="Ihara, Akinori
and Fujibayashi, Daiki
and Suwa, Hirohiko
and Kula, Raula Gaikovina
and Matsumoto, Kenichi",
editor="Balaguer, Federico
and Di Cosmo, Roberto
and Garrido, Alejandra
and Kon, Fabio
and Robles, Gregorio
and Zacchiroli, Stefano",
title="Understanding When to Adopt a Library: A Case Study on ASF Projects",
series="Open Source Systems: Towards Robust Practices",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="128--138",
abstract="Software libraries are widely used by both industrial and open source client projects. Ideally, a client user of a library should adopt the latest version that the library project releases. However, sometimes the latest version is not better than a previous version. This is because the latest version may include additional developer effort to test and integrate all changed features. In this study, our main goal is to better understand the relationship between adoption of library versions and its release cycle. Specifically, we conducted an empirical study of release cycles for 23 libraries and how they were adopted by 415 Apache Software Foundation (ASF) client projects. Our findings show that software projects are quicker to update earlier rapid-release libraries compared to library projects with a longer release cycle. Moreover, results suggest that software projects are more likely to adopt the latest version of a rapid-release library compared to libraries with a longer release cycles.",
isbn="978-3-319-57735-7",
doi="10.1007/978-3-319-57735",
url="https://doi.org/10.1007/978-3-319-57735"
}



@Inbook{Anand2017,
author="Anand, Adarsh
and Bhatt, Navneet
and Aggrawal, Deepti
and Papic, Ljubisa",
editor="Ram, Mangey
and Davim, J. Paulo",
title="Software Reliability Modeling with Impact of Beta Testing on Release Decision",
bookTitle="Advances in Reliability and System Engineering",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="121--138",
abstract="Increased dependence of humans on technologies has made it necessary for developing the software with high reliability and quality. This has led to an increased interest of firms toward the development of software with high level of efficiency; which can be achieved by incorporating beta tests for improving and ensuring that the software is safe and completely free from errors. In a software release life cycle, beta testing is the last important step that software developers carry out before they launch new software. Beta testing is a unique testing process that helps software developers to test a software product in different environments before its final release in the market. In this chapter of the book, we develop a SRGM by inculcating the concept of beta testing in the fault removal process to account for situations that might occur when the software is used in diverse environments. This is done to evade the chances of system being failed in the field. Conducting beta tests results in enhancement of software reliability and has been widely acknowledged. Furthermore, we have developed an optimal scheduling model and showed the importance of beta test while determining the general availability time of the software and making the system more cost effective. For validating the accuracy and predictive capability of the proposed model, we analyzed it on real software data set.",
isbn="978-3-319-48875-2",
}
% doi={10.1007/978-3-319-48875-2_5},
%url="https://doi.org/10.1007/978-3-319-48875-2_5"


@inproceedings{erenkrantz2003release,
  title={Release management within open source projects},
  author={Erenkrantz, Justin R},
  booktitle={Proceedings of the 3rd. Workshop on Open Source Software Engineering},
  year={2003}, 
  url={https://flosshub.org/system/files/51-55.pdf}, 
}


@inproceedings{narayan2012leveraging,
  title={Leveraging Traceability between Code and Tasks for Code Review and Release Management},
  author={Narayan, Nitesh and Finis, Jan and Li, Yang and Delater, Alexander},
  booktitle={Proceedings of the 7th International Conference on Software Engineering Advances (ICSEA)},
  pages={8--14},
  year={2012}
}


## Journal of Software Maintenance ## 

@article{stark1999examination,
  title={An examination of the effects of requirements changes on software maintenance releases},
  author={Stark, George E and Oman, Paul and Skillicorn, Alan and Ameele, Alan},
  journal={Journal of Software Maintenance},
  volume={11},
  number={5},
  pages={293--309},
  year={1999},
  publisher={Chichester, Sussex, England: Wiley, c1989-c2000.}
}


@Article{Poo-Caamano2017,
author="Poo-Caama{\~{n}}o, Germ{\'a}n
and Knauss, Eric
and Singer, Leif
and German, Daniel M.",
title="Herding cats in a FOSS ecosystem: a tale of communication and coordination for release management",
journal="Journal of Internet Services and Applications",
year="2017",
no_month="Aug",
day="30",
volume="8",
number="1",
pages="12",
abstract="Release management in large-scale software development projects requires significant communication and coordination. It is particularly challenging in Free and Open Source Software (FOSS) ecosystems, in which hundreds of loosely connected developers and their projects are coordinated to release software to a schedule. To better understand this process and its challenges, we analyzed over two and half years of communication in the GNOME ecosystem and studied developers' interactions. Through a case study, we cataloged communication channels, determined the main channel from which we categorized high level communication and coordination activities spanning five releases, and triangulated our results by interviewing ten key developers. We found that a release schedule, influence (instead of direct control), and diversity are the main factors that positively impact the release process in the GNOME ecosystem. We report a set of lessons learned that encapsulates our understanding of how the Release Management process function in a FOSS ecosystem, we learned that: (1) ensure that the release team follows the main communication channels used by developers, (2) provide a common place for coordination for an ecosystem, (3) consider including both good technical and social skills in a release team, (4) aim for a diverse release team, (5) based on lack of power, lobbying and consensus based management must be followed, (6) help the release team in the coordination process with a well defined schedule, and (7) release team work is different from regular software work. Our results can help organizations build better large-scale teams and show that research focused on individual projects might miss important parts of the picture.",
issn="1869-0238",
doi="10.1186/s13174-017-0063-2",
url="https://doi.org/10.1186/s13174-017-0063-2"
}



@InProceedings{Muller_et_al2006,
author="M{\"u}ller, Dominic
and Herbst, Joachim
and Hammori, Markus
and Reichert, Manfred",
editor="Dustdar, Schahram
and Fiadeiro, Jos{\'e} Luiz
and Sheth, Amit P.",
title="IT Support for Release Management Processes in the Automotive Industry",
booktitle="International Conference on Business Process Management (BPM 2006)",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="368--377",
abstract="Car development is based on long running, concurrently executed and highly dependent processes. The coordination and synchronization of these processes has become a complex and error-prone task due to the increasing number of functions and embedded systems in modern cars. These systems realize advanced features by embedded software and enable the distribution of functionality as required, for example, by safety equipment. Different life cycle times of mechanical, software and hardware components as well as different duration of their development processes require efficient coordination. Furthermore, product-driven process structures, dynamic adaptation of these structures, and handling real-world exceptions result in challenging demands for any IT system. In this paper we elaborate fundamental requirements for the IT support of car development processes, taking release management as characteristic example. We show to which extent current product data and process management technology meets these requirements, and discuss which essential limitations still exist. This results in a number of fundamental challenges requiring new paradigms for the product-driven design, enactment and adaptation of processes.",
isbn="978-3-540-38903-3"
}



@inproceedings{chen2013release,
  title={"Release Early, Release Often"? An Empirical Analysis of Release Strategy in Open Source Software Co-Creation.},
  author={Chen, Wei and Krishnan, Vish and Zhu, Kevin},
  booktitle={PACIS},
  pages={11},
  year={2013}
}

@inproceedings{cleveland2013toward,
  title={Toward a model for customer-driven release management},
  author={Cleveland, Simon and Ellis, Timothy J},
  year={2013},
  booktitle={AMCIS},
}


## From a HCI perspective ## 
@article{cleveland2014orchestrating,
  title={Orchestrating end-user perspectives in the software release process: An integrated release management framework},
  author={Cleveland, Simon and Ellis, Timothy J},
  journal={Advances in Human-Computer Interaction},
  volume={2014},
  pages={13},
  year={2014},
  publisher={Hindawi Publishing Corp.}
}


# Books on release management # 
@book{Ruhe2010book,
  title={Product Release Planning: Methods, Tools and Applications},
  author={Ruhe, G.},
  isbn={9781420004113},
  url={https://books.google.fi/books?id=rVvLBQAAQBAJ},
  year={2010},
  publisher={CRC Press}
}